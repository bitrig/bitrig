# $OpenBSD: Makefile.cross,v 1.83 2015/12/08 16:04:41 tobiasu Exp $

# preconditions for cross build environment
# build and install the binutils cross package eg bitrig-newbinutils-2.22-arm
# this is  bitrig/bitrig-binutils-2.22 FLAVOR=armcross

cross-tools:	cross-includes cross-buildenv cross-lib
cross-distrib:	cross-tools cross-bin cross-share cross-sys cross-etc-root-var
# cross-gnu \

.NOTPARALLEL:

CCCROSSOPTS=

# Have to compute TARGET_ARCH directly in the Makefile, for .if tests involving
# this variable to work.
.if	${TARGET} == "armv7"
TARGET_ARCH=	arm
TARGET_ARCHCOMP=	armv7
CANON_ABI=-gnueabihf
.elif	(${TARGET} == "arm64")
TARGET_ARCH=	aarch64
.else
TARGET_ARCH=	${TARGET}
.endif
CANON_ABI?=
TARGET_CPU?=	${TARGET_ARCH}
TARGET_ARCHCOMP?=	${TARGET_ARCH}
OSR!=grep ^osr sys/conf/newvers.sh | sed -e 's/osr=//' -e 's/"//g'

# List of LP64 archs
# XXX move to bsd.*.mk?
LP64_ARCH = amd64 aarch64

TARGET_IS_LP64 =
MACHINE_IS_LP64 =
.for _ in ${LP64_ARCH}
. if !empty(TARGET_ARCH:M$_)
    TARGET_IS_LP64 = yes
. endif
. if !empty(MACHINE_ARCH:M$_)
    MACHINE_IS_LP64 = yes
. endif
.endfor

#CROSSCPPFLAGS?=	-nostdinc -I${CROSSDIR}/usr/include
#CROSSLDFLAGS?=	-nostdlib -L${CROSSDIR}/usr/lib -static
CROSSCFLAGS?=	${CROSSCPPFLAGS} ${OPTLVL} ${PIPE} ${DEBUG}
CROSSCXXFLAGS?=	${CROSSCPPFLAGS}
#LDSTATIC?=	-static

# XXX
BINMODE?=555
BINOWN?=root
BINGRP?=bin

CROSSDIR=	${DESTDIR}/usr/cross/${TARGET}
CROSSENV=	AR=${CROSSDIR}/usr/bin/${TARGET_CANONCOMP}-ar \
		AS=${CROSSDIR}/usr/bin/${TARGET_CANONCOMP}-as \
		CC=${CROSSDIR}/usr/bin/${TARGET_CANONCOMP}-clang \
		CPP=${CROSSDIR}/usr/bin/${TARGET_CANONCOMP}-cpp \
		CXX=${CROSSDIR}/usr/bin/${TARGET_CANONCOMP}-clang++ \
		LD=${CROSSDIR}/usr/bin/${TARGET_CANONCOMP}-ld \
		OBJCOPY=${CROSSDIR}/usr/bin/${TARGET_CANONCOMP}-objcopy \
		LORDER=/usr/bin/lorder \
		RANLIB=${CROSSDIR}/usr/bin/${TARGET_CANONCOMP}-ranlib \
		STRIP=${CROSSDIR}/usr/bin/${TARGET_CANONCOMP}-strip \
		HOSTCC=\"${CC}\" HOSTCXX=\"${CXX}\" NOMAN= \
		HOSTCFLAGS=\"${CFLAGS}\" HOSTCXXFLAGS=\"${CXXFLAGS}\" \
		HOSTLDFLAGS=\"${LDFLAGS}\" \
		CFLAGS=\"${CROSSCFLAGS}\" CPPFLAGS=\"${CROSSCPPFLAGS}\" \
		CXXFLAGS=\"${CROSSCXXFLAGS}\" \
		LDFLAGS=\"${CROSSLDFLAGS}\"
CROSSADDPATH=:${CROSSDIR}/usr/bin/
CROSSPATH=	/usr/bin:/bin:/usr/sbin:/sbin${CROSSADDPATH}
CROSSLANGS?=	c c++

TARGET_CANON=`cat ${CROSSDIR}/TARGET_CANON`
TARGET_CANONCOMP=`cat ${CROSSDIR}/TARGET_CANONCOMP`
TARGET_C=${TARGET_ARCH}-unknown-bitrig${OSR}
#CROSSCFLAGS+=${CCCROSSOPTS}

CROSSDIRS=	${CROSSDIR}/.dirs_done
CROSSOBJ=	${CROSSDIR}/.obj_done
CROSSBUILDENV=	${CROSSDIR}/.buildenv_done
CROSSINCLUDES=	${CROSSDIR}/.includes_done
#NO_CROSS=	isakmpd keynote ssh

.include <bsd.own.mk>

.if !empty(PIE_ARCH:M${_arch})
NOPIE_FLAGS=-fno-pie
NOPIE_LDFLAGS=-nopie
PIE_DEFAULT=${DEFAULT_PIE_DEF}
.else
NOPIE_FLAGS=
PIE_DEFAULT=
.endif

# no libcrypto.... these won't build
#NO_CROSS+=	dc passwd ppp tcpdump telnet ftp sasyncd vnconfig
		
# explicit cross-compile
NO_CROSS+=microcode
NO_CROSS+=perl texinfo
NO_CROSS+=nsd
NO_CROSS+=sqlite3
NO_CROSS+=bgplg
NO_CROSS+=bind
NO_CROSS+=unbound
NO_CROSS+=clang

cross-dirs:	${CROSSDIRS}
cross-obj:	${CROSSOBJ}
cross-buildenv:	${CROSSBUILDENV}
cross-includes:	${CROSSINCLUDES}

cross-env:
	@echo ${CROSSENV} MACHINE=${TARGET} \
	    MACHINE_ARCH=`cat ${CROSSDIR}/TARGET_ARCH` \
	    MACHINE_ARCHCOMP=`cat ${CROSSDIR}/TARGET_ARCHCOMP` \
	    MACHINE_CPU=`cat ${CROSSDIR}/TARGET_CPU` \
	    CROSSDIR=${CROSSDIR} \
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET}

${CROSSDIRS}:
	@-mkdir -p ${CROSSDIR}
	@echo ${TARGET_ARCH} > ${CROSSDIR}/TARGET_ARCH
	@echo ${TARGET_ARCHCOMP} > ${CROSSDIR}/TARGET_ARCHCOMP
	@echo TARGET_ARCH is `cat ${CROSSDIR}/TARGET_ARCH`
	@echo TARGET_ARCHCOMP is `cat ${CROSSDIR}/TARGET_ARCHCOMP`
	@echo ${TARGET_CPU} > ${CROSSDIR}/TARGET_CPU
	@echo TARGET_CPU is `cat ${CROSSDIR}/TARGET_CPU`
	@eval `grep '^osr=' sys/conf/newvers.sh`; \
	   echo ${TARGET_ARCH}-unknown-bitrig$$osr > \
	   ${CROSSDIR}/TARGET_CANON
	@eval `grep '^osr=' sys/conf/newvers.sh`; \
	   echo ${TARGET_ARCHCOMP}-unknown-bitrig$$osr${CANON_ABI} > \
	   ${CROSSDIR}/TARGET_CANONCOMP
	@-mkdir -p ${CROSSDIR}
	@-mkdir -p ${CROSSDIR}/usr/${TARGET_CANON}
	@ln -sf ${CROSSDIR}/usr/include \
	    ${CROSSDIR}/usr/${TARGET_CANON}/include
	@ln -sf ${CROSSDIR}/usr/lib \
	    ${CROSSDIR}/usr/${TARGET_CANON}/lib
	@-mkdir -p ${CROSSDIR}/usr/${TARGET_CANON}/bin
	@(cd ${.CURDIR}/etc && DESTDIR=${CROSSDIR} ${MAKE} distrib-dirs)
	@touch ${CROSSDIRS}

${CROSSOBJ}:	${CROSSDIRS}
	@-mkdir -p ${CROSSDIR}/usr/obj
	@(cd ${.CURDIR} && \
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    COMPILER_VERSION=${COMPILER_VERSION} \
	    CROSSDIR=${CROSSDIR} \
	    MACHINE=${TARGET} \
	    MACHINE_ARCHCOMP=${TARGET_ARCHCOMP} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU} \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} obj)
	## until libcompiler_rt is standard, run an explict make objs there
	@(cd ${.CURDIR}/lib/libcompiler_rt && \
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    COMPILER_VERSION=${COMPILER_VERSION} \
	    CROSSDIR=${CROSSDIR} \
	    MACHINE=${TARGET} \
	    MACHINE_ARCHCOMP=${TARGET_ARCHCOMP} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU} \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    ${MAKE} obj)
	@touch ${CROSSOBJ}

## CROSSDIR is intentionally left out of CROSSINCLUDES (libc++)
${CROSSINCLUDES}:	${CROSSOBJ}
	@-mkdir -p ${CROSSDIR}/usr/include
	@(cd ${.CURDIR}/include && \
	    COMPILER_VERSION=${COMPILER_VERSION} \
	    MACHINE=${TARGET} \
	    MACHINE_ARCHCOMP=${TARGET_ARCHCOMP} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU} \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \
	    ${MAKE} prereq && \
	    COMPILER_VERSION=${COMPILER_VERSION} \
	    MACHINE=${TARGET} \
	    MACHINE_ARCHCOMP=${TARGET_ARCHCOMP} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU} \
	    MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    TARGET_ARCH=${TARGET_ARCH} TARGET_CPU=${TARGET_CPU} \
	    ${MAKE} DESTDIR=${CROSSDIR} includes)
	@touch ${CROSSINCLUDES}

${CROSSBUILDENV}:	${CROSSINCLUDES}
#	 XXX for now assumes the build env is in place 
	a=${TARGET_CANONCOMP} ; \
	l=$$(echo /usr/local/bin/$${a}-* ) ; \
	for file in $${l} ; \
	do \
		echo file $${file} ; \
		ln -sf $${file} ${CROSSDIR}/usr/bin/$$(basename $${file}) ;\
	done ;
	a=${TARGET_CANONCOMP} ; \
	if [ -d /usr/local/$${a}/bin ] ;\
	then \
		mkdir -p ${CROSSDIR}/usr/${TARGET_CANONCOMP}/bin; \
		l=$$(echo /usr/local/$${a}/bin/* ) ; \
		echo l $${l} ;\
		for file in $${l} ; \
		do \
			echo linking $${file}; \
			ln -sf $${file} ${CROSSDIR}/usr/$${a}/bin/$$(basename $${file}) ;\
		done ;\
	fi ; \
	rm -f ${CROSSDIR}/usr/bin/$${a}-clang; \
	cp /usr/bin/clang ${CROSSDIR}/usr/bin/$${a}-cross-clang; \
	echo  "#! /bin/sh\n${CROSSDIR}/usr/bin/$${a}-cross-clang -target $${a} --sysroot ${CROSSDIR} ${CCCROSSOPTS} \"$$""@\"" > ${CROSSDIR}/usr/bin/$${a}-clang; \
	chmod +x ${CROSSDIR}/usr/bin/$${a}-clang; \
	echo  "#! /bin/sh\n${CROSSDIR}/usr/bin/$${a}-cross-clang --driver-mode=g++ -target $${a} --sysroot ${CROSSDIR} ${CCCROSSOPTS} \"$$""@\"" > ${CROSSDIR}/usr/bin/$${a}-clang++; \
	chmod +x ${CROSSDIR}/usr/bin/$${a}-clang++; \
	rm -f ${CROSSDIR}/usr/bin/$${a}-cpp ${CROSSDIR}/usr/$${a}/bin/cpp; \
	sed -e "s,ARCH=\"\",ARCH=\"-isysroot ${CROSSDIR}\"," < \
	    usr.bin/cpp/cpp.sh > ${CROSSDIR}/usr/bin/$${a}-cpp; \
	chmod +x ${CROSSDIR}/usr/bin/$${a}-cpp; \
	cp ${CROSSDIR}/usr/bin/$${a}-cpp ${CROSSDIR}/usr/$${a}/bin/cpp ; \
	mv ${CROSSDIR}/usr/bin/$${a}-ld ${CROSSDIR}/usr/bin/$${a}-cross-ld ; \
	echo "#!/bin/sh\n${CROSSDIR}/usr/bin/$${a}-cross-ld \"$$""@\" -L ${CROSSDIR}/usr/lib" > ${CROSSDIR}/usr/bin/$${a}-ld ;\
	chmod +x ${CROSSDIR}/usr/bin/$${a}-ld 
	@touch ${CROSSBUILDENV}


# XXX MAKEOBJDIR maybe should be obj.${TARGET} here, revisit later
cross-lib:	${CROSSGCC}
	MACHINE=${TARGET} \
	    MACHINE_ARCHCOMP=${TARGET_ARCHCOMP} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU} \
	    CROSSDIR=${CROSSDIR} \
	    BSDOBJDIR=${CROSSDIR}/usr/obj; \
	export MACHINE MACHINE_ARCH MACHINE_CPU BSDOBJDIR CROSSDIR; \
	(cd ${.CURDIR}/lib; \
	    for lib in libcompiler_rt csu libc; do \
	    (cd $$lib; \
	        eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		    ${MAKE} WANTLINT=no depend all ;\
	        eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		    DESTDIR=${CROSSDIR} \
		    ${MAKE} WANTLINT=no install); \
	    done; \
	    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	        SKIPDIR=\"${NO_CROSS}\" \
	        ${MAKE} WANTLINT=no depend all ; \
	    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		DESTDIR=${CROSSDIR} \
	        SKIPDIR=\"${NO_CROSS}\" \
	        ${MAKE} WANTLINT=no install)

cross-bin:	${CROSSOBJ}
	MACHINE=${TARGET} \
	    MACHINE_ARCHCOMP=${TARGET_ARCHCOMP} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU}; \
	    CROSSDIR=${CROSSDIR} \
	export MACHINE MACHINE_ARCH MACHINE_CPU CROSSDIR; \
	for i in libexec bin sbin usr.bin usr.sbin; do \
	(cd ${.CURDIR}/$$i; \
	    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	        SKIPDIR=\"${BINUTILS} ${NO_CROSS}\" \
	        ${MAKE} depend all ; \
	    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		DESTDIR=${CROSSDIR} \
	        SKIPDIR=\"${BINUTILS} ${NO_CROSS}\" \
	        ${MAKE} install); \
	done

cross-gnu:	${CROSSOBJ}
	MACHINE=${TARGET} \
	    MACHINE_ARCHCOMP=${TARGET_ARCHCOMP} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU}; \
	    CROSSDIR=${CROSSDIR} \
	export MACHINE MACHINE_ARCH MACHINE_CPU CROSSDIR; \
	for i in gnu/lib gnu/usr.sbin gnu/usr.bin ; do \
	(cd ${.CURDIR}/$$i; \
	    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	        SKIPDIR=\"${NO_CROSS}\" \
	        ${MAKE} depend all ; \
	    eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		DESTDIR=${CROSSDIR} \
	        SKIPDIR=\"${NO_CROSS}\" \
	        ${MAKE} install); \
	done

cross-share:   ${CROSSOBJ}
	MACHINE=${TARGET} \
	    MACHINE_ARCHCOMP=${TARGET_ARCHCOMP} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU}; \
	    CROSSDIR=${CROSSDIR} \
	export MACHINE MACHINE_ARCH MACHINE_CPU CROSSDIR; \
	for i in share; do \
	    (cd ${.CURDIR}/$$i; \
	        eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		SKIPDIR=\"${NO_CROSS}\" \
		${MAKE} depend all); \
	    (cd ${.CURDIR}/$$i; \
	        eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		DESTDIR=${CROSSDIR} \
		SKIPDIR=\"${NO_CROSS}\" \
		${MAKE}  install); \
	done

cross-sys:   ${CROSSOBJ}
	MACHINE=${TARGET} \
	    MACHINE_ARCHCOMP=${TARGET_ARCHCOMP} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU}; \
	    CROSSDIR=${CROSSDIR} \
	export MACHINE MACHINE_ARCH MACHINE_CPU CROSSDIR; \
	for i in sys; do \
	    (cd ${.CURDIR}/$$i; \
	        eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
		SKIPDIR=\"${NO_CROSS}\" \
		${MAKE} depend all; \
	        eval ${CROSSENV} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	        DESTDIR=${CROSSDIR} \
		SKIPDIR=\"${NO_CROSS}\" \
		${MAKE}  install); \
	done

cross-etc-root-var:	${CROSSOBJ}
	(cd ${.CURDIR}/etc && \
	    MACHINE=${TARGET} \
	    MACHINE_ARCHCOMP=${TARGET_ARCHCOMP} \
	    MACHINE_ARCH=${TARGET_ARCH} MACHINE_CPU=${TARGET_CPU} \
	    DESTDIR=${CROSSDIR} \
	    ${MAKE} distribution-etc-root-var)

cross-depend:
	@(cd ${.CURDIR} && \
	    CROSSDIR=${CROSSDIR} \
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    SKIPDIR="${NO_CROSS}" \
	    ${MAKE} depend)

cross-clean:
	@(cd ${.CURDIR} && \
	    CROSSDIR=${CROSSDIR} \
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    SKIPDIR="${NO_CROSS}" \
	    ${MAKE} clean)

cross-cleandir:
	@(cd ${.CURDIR} && \
	    CROSSDIR=${CROSSDIR} \
	    BSDOBJDIR=${CROSSDIR}/usr/obj \
	    BSDSRCDIR=${.CURDIR} MAKEOBJDIR=obj.${MACHINE}.${TARGET} \
	    SKIPDIR="${NO_CROSS}" \
	    ${MAKE} cleandir)

cross-native-binutils:
	for file in addr2line ar as c++filt gprof ld nm objcopy objdump \
	   ranlib size strings strip ;  \
	do \
		cp /usr/bin/$${file} /usr/local/bin/${TARGET_C}-$${file} ; \
	done

